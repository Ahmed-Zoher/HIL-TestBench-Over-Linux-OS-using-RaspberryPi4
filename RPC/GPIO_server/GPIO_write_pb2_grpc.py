# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import GPIO_write_pb2 as GPIO__write__pb2


class PI_GPIOStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.set_mode = channel.unary_unary(
                '/PI_GPIO/set_mode',
                request_serializer=GPIO__write__pb2.ModeInputParams.SerializeToString,
                response_deserializer=GPIO__write__pb2.Empty.FromString,
                )
        self.write = channel.unary_unary(
                '/PI_GPIO/write',
                request_serializer=GPIO__write__pb2.SetInputParams.SerializeToString,
                response_deserializer=GPIO__write__pb2.Empty.FromString,
                )


class PI_GPIOServicer(object):
    """Missing associated documentation comment in .proto file"""

    def set_mode(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PI_GPIOServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'set_mode': grpc.unary_unary_rpc_method_handler(
                    servicer.set_mode,
                    request_deserializer=GPIO__write__pb2.ModeInputParams.FromString,
                    response_serializer=GPIO__write__pb2.Empty.SerializeToString,
            ),
            'write': grpc.unary_unary_rpc_method_handler(
                    servicer.write,
                    request_deserializer=GPIO__write__pb2.SetInputParams.FromString,
                    response_serializer=GPIO__write__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PI_GPIO', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PI_GPIO(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def set_mode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PI_GPIO/set_mode',
            GPIO__write__pb2.ModeInputParams.SerializeToString,
            GPIO__write__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PI_GPIO/write',
            GPIO__write__pb2.SetInputParams.SerializeToString,
            GPIO__write__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
